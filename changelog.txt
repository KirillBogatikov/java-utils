v. 0.0.1 (Argali) - first stable release
1. Utilitary types:
Duet - a pair of two values (A & B)
Trio - simple structure for three values (A, B and C)
NotNullValue - object, which allows only not-null value and automatically checks value.

2. Common interfaces:
Consumer - allows processing some data and converting it to another object
DeafConsumer - allows only generating new value without source object

3. Utilitary static classes:
Equaling - utils for smart and safe comparing objects. No NPE, no errors, flex interface.
Functional - more functional tricks. Provides select and map methods.
Nullable - smart and safe checks for null value. Allows to execute different Consumers if value is null
and if value is not null. Provides methods for collections - firstOrDefault and lastOrDefault.

v. 0.0.2 (Bermuda) - improvements, magic, tables!
1. Table type - complex object, contains table structure. Allows "torn matrices". Works fast and safe.
2. New interfaces:
VoidConsumer - eats data, but does not return anything.
Loop - controller of loop. Allows skip iteration, break loop or continue processing.
Selector - consumer, created for functional utils. Creates value based on source object. Has access to Loop.
Stream - big, smart and very tasty interface for functional programming. Analog of Java Stream API, but more functional

3. Implementations. New package.
DefaultLoop - simple implementation of Loop interface. Used in utils.
DefaultStream - simple implementation of Stream based on List<T> collection. Powerful, fase, safe. But you can do better.

4. Improvements:
Nullable.checkAllNotNull for arrays! Check array and it's content for null values.
Functional select and map: simplified, rewritten with Stream.
Functional createStream and createJoinedStream for simple generating Stream of strange values.

v. 0.0.3 (Camel) - DSV tables, String joining and safety
1. DSV - Delimiter Separated Values
Data structure based of CSV (comma separated values, RFC 4180).
Now project contains tools for reading and writing DSV to file or stream. See org.projector.dsv package.

2. String Joiner - CharSequence implementation for simple joining strings with specified delimiter.
Projector's String Joiner is a analog of java.util.StringJoiner class for platforms without this class (i.e. Android OS).

v. 0.0.4 (Democracy) [IN PROGRESS] - Fixes, improvements, new tests
1. Java 7 compability. POM Java version should be down to Java 1.7 for more compability with Android JVM.
2. New Stream aggregate functions. Old min(), max(), average() returns double equivalent of stream items. 
New aggregate functions returns origin stream item. Comparing based on old algorithm with calculating by equivalents.
3. JUnit vulnerability fix (bump to 4.13.3)
4. Improve NotNull and Nullable annotations. Add Javadoc information to annotations
5. Update in DSV module structure.
DsvCell move to org.projector.dsv.data
DsvTable move to org.projector.dsv.data
SimpleDeserializer rename to DefaultDeserializer and move to org.projector.dsv.impl
SimpleSerializer rename to DefaultSerializer and move to org.projector.dsv.impl
Extract DsvReader and DsvWriter interfaces.
DsvReader rename to DefaultDsvReader and move to org.projector.dsv.impl. Now this class should implements DsvReader interface.
DsvWriter rename to DefaultDsvWriter and move to org.projector.dsv.impl. Now this class should implements DsvWriter interface.
6. Implement StringDsvReader and StringDsvWriter for read/write data from/into CharSequence instance.
7. Add DsvTable.toStream() method. Method packs all cells on each other to stream. For example, table
Header A | Header B | Header C
  Anton  |    19    |  Moscow
  Lizzy  |    24    | New York
  Mike   |    65    | Hong Kong
  
should be packed into stream: (Header A, Header B, Header C, Anton, 19, Moscow, Lizzy, 24, New York, Mike, 65, Hong Kong)
8. Delete Stream.next(), Stream.hasNext(). Add Stream.remove(int), Stream.remove(int, I) and Stream.iterate() methods. 
Add StreamIterator interface.
StreamIterator<I> should has next methods:
    - hasNext():boolean
    - next():I
    - skip(int):void
MutableStreamIterator<I> extends StreamIterator<I> interface and provides next methods:
    - remove():void
    - clear():void
Stream.iterate() - concurrent but safe method. It can provide millions of iterators, but Stream.remove(int, I), used by
MutableStreamIterator checks item availability.
9. Add public Stream.isMutable():boolean and Protected Stream.setMutable(boolean) method. 
This methods determine required type of StreamIterator created by Stream.iterate() method.